// Code generated by "enumer --type=HTTPStatus -json"; DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
)

const (
	_HTTPStatusName_0 = "StatusOK"
	_HTTPStatusName_1 = "StatusUnauthorizedStatusPaymentRequiredStatusForbidden"
)

var (
	_HTTPStatusIndex_0 = [...]uint8{0, 8}
	_HTTPStatusIndex_1 = [...]uint8{0, 18, 39, 54}
)

func (i HTTPStatus) String() string {
	switch {
	case i == 200:
		return _HTTPStatusName_0
	case 401 <= i && i <= 403:
		i -= 401
		return _HTTPStatusName_1[_HTTPStatusIndex_1[i]:_HTTPStatusIndex_1[i+1]]
	default:
		return fmt.Sprintf("HTTPStatus(%d)", i)
	}
}

var _HTTPStatusValues = []HTTPStatus{200, 401, 402, 403}

var _HTTPStatusNameToValueMap = map[string]HTTPStatus{
	_HTTPStatusName_0[0:8]:   200,
	_HTTPStatusName_1[0:18]:  401,
	_HTTPStatusName_1[18:39]: 402,
	_HTTPStatusName_1[39:54]: 403,
}

// HTTPStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func HTTPStatusString(s string) (HTTPStatus, error) {
	if val, ok := _HTTPStatusNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to HTTPStatus values", s)
}

// HTTPStatusValues returns all values of the enum
func HTTPStatusValues() []HTTPStatus {
	return _HTTPStatusValues
}

// IsAHTTPStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i HTTPStatus) IsAHTTPStatus() bool {
	for _, v := range _HTTPStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for HTTPStatus
func (i HTTPStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for HTTPStatus
func (i *HTTPStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("HTTPStatus should be a string, got %s", data)
	}

	var err error
	*i, err = HTTPStatusString(s)
	return err
}
