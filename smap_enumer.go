// Code generated by "enumer -type=SMAP -json"; DO NOT EDIT.

package main

import (
	"encoding/json"
	"fmt"
)

const _SMAPName = "NAKAIKIMURAINAGAKIKUSANAGIKATORI"

var _SMAPIndex = [...]uint8{0, 5, 11, 18, 26, 32}

func (i SMAP) String() string {
	i -= 1
	if i < 0 || i >= SMAP(len(_SMAPIndex)-1) {
		return fmt.Sprintf("SMAP(%d)", i+1)
	}
	return _SMAPName[_SMAPIndex[i]:_SMAPIndex[i+1]]
}

var _SMAPValues = []SMAP{1, 2, 3, 4, 5}

var _SMAPNameToValueMap = map[string]SMAP{
	_SMAPName[0:5]:   1,
	_SMAPName[5:11]:  2,
	_SMAPName[11:18]: 3,
	_SMAPName[18:26]: 4,
	_SMAPName[26:32]: 5,
}

// SMAPString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SMAPString(s string) (SMAP, error) {
	if val, ok := _SMAPNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SMAP values", s)
}

// SMAPValues returns all values of the enum
func SMAPValues() []SMAP {
	return _SMAPValues
}

// IsASMAP returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SMAP) IsASMAP() bool {
	for _, v := range _SMAPValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SMAP
func (i SMAP) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SMAP
func (i *SMAP) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SMAP should be a string, got %s", data)
	}

	var err error
	*i, err = SMAPString(s)
	return err
}
